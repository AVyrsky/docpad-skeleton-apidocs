
window.sortingAPI = (function(){

  const $apiInput = $('#apiFilterInput'),
    $packageList = $('#packageFilterList'),
    $singlePackageList = $('#singlePackageFilterList'),
    $topicList = $('.single-packages>span'),
    $packages = $('.packages'),
    $singlePackages = $('.single-packages'),
    topics = {},
    allSinglePackages = (location.pathname.startsWith('/rn') || location.pathname.startsWith('/internal/rn') || location.pathname.startsWith('/internal/architecture')) ? 'All Topics' : 'All Packages', //nasty workaround, I know
    allPackages = (location.pathname.startsWith('/rn') || location.pathname.startsWith('/internal/rn')) ? 'All Packages' : 'All Topics',
    ignoredFields = ['item', 'hide', 'text'];

  createTopicsObject();

  $singlePackageList.change(singlePackageFilter);

  $packageList.change(packageFilter);

  $apiInput.keyup(apiFilter);

  $(document).ready(checkFilters);

  /**
   * createTopicsObject generates single object that works as something like virtualDOM - you work on this object and then use renderLeftNav function
   */
  function createTopicsObject(){
    $topicList.each(function() {
      const topicName = $(this).text();
      const $singlePackagesArray = $(".single-packages span:contains(\"" + topicName + "\")").parent().find($packages);
      if($singlePackagesArray.length){
        topics[topicName] = {
          item: $(this).parent(), //parent of span - li tag of package
          hide: false,
          text: topicName
        };
        $singlePackagesArray.each(function(){
          const packageName = $(this).find('span:first').text();
          topics[topicName][packageName] =  {
            item    : $(this),
            services: [],
            hide    : false,
            text    : packageName
          };
          $(this).find('.apis a').each(function(){
            topics[topicName][packageName].services.push({
              text: $(this).text(),
              item: $(this).parent(),
              hide: false
            });
          });
        });
      }
      else {
        topics[topicName] = {
          item    : $(this).parent(), //parent of span - li tag of package
          services: [],
          hide    : false,
          text    : topicName
        };
        $(".single-packages span:contains(\"" + topicName + "\")").parent().find('.apis a').each(function(){
          topics[topicName].services.push({
            text: $(this).text(),
            item: $(this).parent(),
            hide: false
          });
        });
      }
    });
  }

  /**
   * singlePackageFilter is event handler for $singlePackage select tag
   */
  function singlePackageFilter(){
    const topicName = $(this).find('option:selected').text();
    const packageTopicName = $packageList.find('option:selected').text();

    if(topicName === allSinglePackages){ //show all packages
      $packageList.val(allPackages.toLowerCase()), $packageList.trigger('change'), $packageList.hide(), $packageList.parent().hide();
      showElements(topics);
      objectIterator(topics, (topic) => {
        if($packageList.length && topic.services && packageTopicName !== allPackages){
          topic.hide = true;
        }
      });
    }
    else { //show single package
      hideElements(topics);
      const topic = topics[topicName];
      $packageList.length && topic.services && packageTopicName !== allPackages
        ? topic.hide = true
        : topic.hide = false;

      $packageList.length && topic.services
        ? ($packageList.hide(), $packageList.parent().hide(), $packageList.val(allPackages.toLowerCase()))
        : ($packageList.show(), $packageList.parent().show());
    }
    $packageList.trigger('change');
    renderLeftNav();
  }

  /**
   * packageFilter is event handler for $ackage select tag
   */
  function packageFilter(){
    const topicName = $(this).find('option:selected').text();
    const singlePackageTopicName = $singlePackageList.find('option:selected').text();
    if(topicName === allPackages){ //show all packages
      objectIterator(topics, (topic) => {
        showElements(topic);
      });
      if(singlePackageTopicName === allSinglePackages){ // show all single packages
        showElements(topics);
      }
      else { //show one single package
        topics[singlePackageTopicName].hide = false;
      }
    }
    else { //show one package
      objectIterator(topics, (topic) => {
        if(topic.services || !topic[topicName]) return;
        const isHidden = topic.hide; //was it hidden before?
        hideElements(topic);
        hideElements(topics);
        topic.hide = isHidden;
        topic[topicName].hide = false;
      });
    }
    renderLeftNav();
  }

  /**
   * apiFilter is event handler for text input
   */
  function apiFilter(){
    const api = $(this).val().toLowerCase();

    objectIterator(topics, (topic) => {
      if(topic.services){
        topic.services.forEach((service) => {

          service.text.toLowerCase().indexOf(api) !== -1
            ? service.hide = false
            : service.hide = true;

        });
        return;
      }

      objectIterator(topic, (pack) => {
        let anyServiceVisible = false;
        const packName = $packageList.find('option:selected').text();
        if(pack.text === packName || packName === allPackages){
          pack.hide = false;
        }
        pack.services.forEach((service) => {

          service.text.toLowerCase().indexOf(api) !== -1
            ? (service.hide = false, anyServiceVisible = true)
            : service.hide = true;

        });

      });
    });

    renderLeftNav();
  }

  function checkFilters() {

    const suffix = getSuffix();
    if(!suffix) return;

    const singlePackageFilterName = sessionStorage.getItem("singlePackageFilter" + suffix);
    delete sessionStorage["singlePackageFilter" + suffix];
    if(singlePackageFilterName){
      if($("#singlePackageFilterList:contains(\"" + singlePackageFilterName + "\")").length){
        $singlePackageList.val(singlePackageFilterName.toLowerCase());
      }
      $singlePackageList.trigger('change');
    }

    const packageFilterName = sessionStorage.getItem("packageFilter" + suffix);
    delete sessionStorage["packageFilter" + suffix];
    if(packageFilterName){
      if($("#packageFilterList:contains(\"" + packageFilterName + "\")").length) {
        $packageList.val(packageFilterName.toLowerCase());
      }
      $packageList.trigger('change');
    }

    const apiInputValue = sessionStorage.getItem("apiInput" + suffix);
    delete sessionStorage["apiInput" + suffix];
    if(apiInputValue){
      $apiInput.val(apiInputValue);
      $apiInput.trigger('keyup');
    }
  }

  /**
   * renderLeftNav is making changes to DOM based on topics object generated by createTopicsObject function
   */
  function renderLeftNav() {
    objectIterator(topics, (topic) => {
      topic.hide
        ? topic.item.hide()
        : topic.item.show();

      if(topic.services){
        let anyServiceVisible = false;


        topic.services.forEach((service) => {

          service.hide
            ? service.item.hide()
            : (service.item.show(), anyServiceVisible = true);

        });
        !anyServiceVisible
          ? topic.item.hide()
          : false;

        return;
      }

      let anyPackageVisible = false, anyTopicVisible = false;
      objectIterator(topic, (pack) => {
        let anyServiceVisible = false;

        pack.services.forEach((service) => {

          service.hide
            ? service.item.hide()
            : (service.item.show(), anyServiceVisible = true, anyPackageVisible = true);

        });


        !anyServiceVisible
          ? (pack.item.hide(), pack.hide = true)
          : false;

        pack.hide
          ? pack.item.hide()
          : (pack.item.show(), anyTopicVisible = true);
      });


      (!anyPackageVisible || !anyTopicVisible)
        ? topic.item.hide()
        : false;
    });
  }

  /**
   * showElements operates on topics object and it shows every inner element of given object
   * @param  {Object} obj [object with elements that are going to be shown]
   */
  function showElements(obj) {
    objectIterator(obj, (item) => {
      item.hide = false;
    });
  }

  /**
   * hideElements operates on topics object and it hides every inner element of given object
   * @param  {Object} obj [object with elements that are going to be hidden]
   */
  function hideElements(obj){
    objectIterator(obj, (item) => {
      item.hide = true;
    });
  }

  /**
   * objectIterator is iterating through every key that isn't excluded in ignoredFields array
   * @param  {Object}   obj [object that is iterated]
   * @param  {Function} cb  [callback that is fired for each element]
   */
  function objectIterator(obj, cb) {
    Object.keys(obj).forEach((name) => {
      if(ignoredFields.indexOf(name) !== -1) return;
      cb(obj[name]);
    });
  }

  /**
   * saveFilters is a function fired at window unload to save filters to sessionStorage
   */
  function saveFilters(){
    const singlePackages = $singlePackageList.find('option:selected').text(),
      packages = $packageList.find('option:selected').text(),
      apiInput = $apiInput.val();
    const suffix = getSuffix();
    if(!suffix) return;
    (singlePackages && singlePackages !== allSinglePackages) ? sessionStorage.setItem("singlePackageFilter" + suffix, singlePackages) : false;
    (packages && packages !== allPackages) ? sessionStorage.setItem("packageFilter" + suffix, packages) : false;
    apiInput ? sessionStorage.setItem("apiInput" + suffix, apiInput) : false;
  }

  function getSuffix(){
    if(location.pathname.startsWith('/rn')) return '_ern';
    if(location.pathname.startsWith('/internal/rn')) return '_irn';
    if(location.pathname === '/services/' || location.pathname === '/services/index.html') return '_eservices';
    if(location.pathname === '/internal/services/' || location.pathname === '/internal/services/index.html') return '_iservices';
    if(location.pathname === '/internal/architecture/' || location.pathname === '/internal/architecture/index.html') return '_iarchitecture';

    return false;
  }

  $(window).unload(saveFilters);

  return {
    topics,
    renderLeftNav,
    objectIterator,
    showElements,
    hideElements,
    createTopicsObject
  };
})();
